//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wish2DishWeb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WishDishDBEntities : DbContext
    {
        public WishDishDBEntities()
            : base("name=WishDishDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<ProductBatch> ProductBatches { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalesInventory> SalesInventories { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual int AddBatch(string batchNumber, Nullable<System.DateTime> batchDate)
        {
            var batchNumberParameter = batchNumber != null ?
                new ObjectParameter("BatchNumber", batchNumber) :
                new ObjectParameter("BatchNumber", typeof(string));
    
            var batchDateParameter = batchDate.HasValue ?
                new ObjectParameter("BatchDate", batchDate) :
                new ObjectParameter("BatchDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBatch", batchNumberParameter, batchDateParameter);
        }
    
        public virtual int AddNewSales(Nullable<int> customerId, Nullable<System.DateTime> sDate, string invNo, Nullable<decimal> dueAmount, Nullable<decimal> paidAmount, Nullable<decimal> totalBillAmount)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("SDate", sDate) :
                new ObjectParameter("SDate", typeof(System.DateTime));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var dueAmountParameter = dueAmount.HasValue ?
                new ObjectParameter("DueAmount", dueAmount) :
                new ObjectParameter("DueAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var totalBillAmountParameter = totalBillAmount.HasValue ?
                new ObjectParameter("TotalBillAmount", totalBillAmount) :
                new ObjectParameter("TotalBillAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewSales", customerIdParameter, sDateParameter, invNoParameter, dueAmountParameter, paidAmountParameter, totalBillAmountParameter);
        }
    
        public virtual int AddNewSalesItem(Nullable<int> salesId, Nullable<int> productBatchId, Nullable<decimal> quantity)
        {
            var salesIdParameter = salesId.HasValue ?
                new ObjectParameter("SalesId", salesId) :
                new ObjectParameter("SalesId", typeof(int));
    
            var productBatchIdParameter = productBatchId.HasValue ?
                new ObjectParameter("ProductBatchId", productBatchId) :
                new ObjectParameter("ProductBatchId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewSalesItem", salesIdParameter, productBatchIdParameter, quantityParameter);
        }
    
        public virtual int AddProduct(Nullable<int> categoryId, string name, string gujaratiName, string hindiName, string image, Nullable<decimal> weight, Nullable<decimal> stdWeight)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var gujaratiNameParameter = gujaratiName != null ?
                new ObjectParameter("GujaratiName", gujaratiName) :
                new ObjectParameter("GujaratiName", typeof(string));
    
            var hindiNameParameter = hindiName != null ?
                new ObjectParameter("HindiName", hindiName) :
                new ObjectParameter("HindiName", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var stdWeightParameter = stdWeight.HasValue ?
                new ObjectParameter("StdWeight", stdWeight) :
                new ObjectParameter("StdWeight", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", categoryIdParameter, nameParameter, gujaratiNameParameter, hindiNameParameter, imageParameter, weightParameter, stdWeightParameter);
        }
    
        public virtual int AddPurchase(Nullable<int> productId, Nullable<decimal> cost, Nullable<decimal> mRP, Nullable<int> batchId, Nullable<decimal> stock)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            var mRPParameter = mRP.HasValue ?
                new ObjectParameter("MRP", mRP) :
                new ObjectParameter("MRP", typeof(decimal));
    
            var batchIdParameter = batchId.HasValue ?
                new ObjectParameter("batchId", batchId) :
                new ObjectParameter("batchId", typeof(int));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPurchase", productIdParameter, costParameter, mRPParameter, batchIdParameter, stockParameter);
        }
    
        public virtual ObjectResult<AddSaleItem_Result> AddSaleItem(Nullable<int> productBatchId, Nullable<int> custId, Nullable<decimal> weight)
        {
            var productBatchIdParameter = productBatchId.HasValue ?
                new ObjectParameter("ProductBatchId", productBatchId) :
                new ObjectParameter("ProductBatchId", typeof(int));
    
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("CustId", custId) :
                new ObjectParameter("CustId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddSaleItem_Result>("AddSaleItem", productBatchIdParameter, custIdParameter, weightParameter);
        }
    
        public virtual int CreateCustomer(string name, Nullable<int> referredBy)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var referredByParameter = referredBy.HasValue ?
                new ObjectParameter("ReferredBy", referredBy) :
                new ObjectParameter("ReferredBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomer", nameParameter, referredByParameter);
        }
    
        public virtual ObjectResult<GenerateLabel_Result> GenerateLabel(Nullable<int> productBatchId, Nullable<decimal> weight)
        {
            var productBatchIdParameter = productBatchId.HasValue ?
                new ObjectParameter("ProductBatchId", productBatchId) :
                new ObjectParameter("ProductBatchId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateLabel_Result>("GenerateLabel", productBatchIdParameter, weightParameter);
        }
    
        public virtual ObjectResult<GetErCommReport_Result> GetErCommReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetErCommReport_Result>("GetErCommReport");
        }
    
        public virtual ObjectResult<StockInHand_Result> StockInHand(Nullable<bool> isBatchWise)
        {
            var isBatchWiseParameter = isBatchWise.HasValue ?
                new ObjectParameter("IsBatchWise", isBatchWise) :
                new ObjectParameter("IsBatchWise", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockInHand_Result>("StockInHand", isBatchWiseParameter);
        }
    
        public virtual ObjectResult<StockCosts_Result> StockCosts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockCosts_Result>("StockCosts");
        }
    
        public virtual ObjectResult<CreateSharingList_Result> CreateSharingList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateSharingList_Result>("CreateSharingList");
        }
    
        public virtual ObjectResult<LowStock_Result> LowStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LowStock_Result>("LowStock");
        }
    
        public virtual ObjectResult<GetProductBatches_Result> GetProductBatches()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductBatches_Result>("GetProductBatches");
        }
    
        public virtual ObjectResult<GetDownLine_Result> GetDownLine(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDownLine_Result>("GetDownLine", customerIdParameter);
        }
    
        public virtual ObjectResult<GetUpLine_Result> GetUpLine(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpLine_Result>("GetUpLine", customerIdParameter);
        }
    }
}
